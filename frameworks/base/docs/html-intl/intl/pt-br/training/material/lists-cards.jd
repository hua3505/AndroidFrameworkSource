page.title=Como criar listas e cartões

@jd:body

<div id="tb-wrapper">
<div id="tb">
<h2>Esta lição ensina a</h2>
<ol>
  <li><a href="#RecyclerView">Criar listas</a></li>
  <li><a href="#CardView">Criar cartões</a></li>
  <li><a href="#Dependencies">Adicionar dependências</a></li>
</ol>
<h2>Você também deve ler</h2>
<ul>
  <li><a href="http://www.google.com/design/spec">Especificações do Material Design</a></li>
  <li><a href="{@docRoot}design/material/index.html">Material Design no Android</a></li>
</ul>
</div>
</div>


<p>Para criar listas e cartões complexos com estilos do Material Design no seu aplicativo, você pode usar os widgets
{@link android.support.v7.widget.RecyclerView} e {@link android.support.v7.widget.CardView}
.</p>


<h2 id="RecyclerView">Criar listas</h2>

<p>O widget {@link android.support.v7.widget.RecyclerView} é uma versão mais avançada e flexível
do {@link android.widget.ListView}. Esse widget é um contêiner para exibir grandes conjuntos
de dados que podem ser rolados com muita eficiência ao manter um número limitado de visualizações. Use o widget
{@link android.support.v7.widget.RecyclerView} quando tiver coletas de dados cujos elementos mudam
durante a execução baseados na ação do usuário ou em eventos de rede.</p>

<p>A classe {@link android.support.v7.widget.RecyclerView} simplifica a exibição e o tratamento de
grandes conjuntos de dados oferecendo:</p>

<ul>
  <li>Gerenciadores de layout para posicionar itens</li>
  <li>Animações padrão para operações de item comuns, como remoção ou adição de itens</li>
</ul>

<p>Você também tem a flexibilidade de definir gerenciadores de layout e animações personalizadas para widgets {@link
android.support.v7.widget.RecyclerView}.</p>

<img src="{@docRoot}training/material/images/RecyclerView.png" alt="" width="550" height="106" />
<p class="img-caption">
<strong>Figura 1</strong>. O widget <code>RecyclerView</code>.
</p>

<p>Para usar o widget {@link android.support.v7.widget.RecyclerView}, você deve especificar um
adaptador e um gerenciador de layout. Para criar um adaptador, amplie a classe {@link
android.support.v7.widget.RecyclerView.Adapter RecyclerView.Adapter}. Os detalhes
da implementação dependem das especificações do conjunto de dados e do tipo de visualização. Para obter
mais informações, veja os <a href="#RVExamples">exemplos</a> abaixo.</p>

<div style="float:right">
<img src="{@docRoot}design/material/images/list_mail.png" alt="" width="250" height="426" />
<p class="img-caption" style="margin-left:8px">
<strong>Figura 2</strong> - Listas com <code>RecyclerView</code>.
</p>
</div>

<p>Um <strong>gerenciador de layout</strong> posiciona as visualizações de item dentro de um {@link
android.support.v7.widget.RecyclerView} e determina quando reutilizar visualizações de item que não
estão mais visíveis ao usuário. Para reutilizar (ou <em>reciclar</em>) uma visualização, um gerenciador de layout pode solicitar
ao adaptador a substituição do conteúdo da visualização com um elemento diferente do conjunto de dados. Visualizações
recicladas dessa maneira aprimoram o desempenho ao evitar a criação de visualizações desnecessárias ou a
realização de pesquisas {@link android.app.Activity#findViewById findViewById()} caras.</p>

<p>{@link android.support.v7.widget.RecyclerView} fornece esses gerenciadores de layout embutidos:</p>

<ul>
<li>{@link android.support.v7.widget.LinearLayoutManager} exibe itens em uma lista de rolagem
vertical ou horizontal.</li>
<li>{@link android.support.v7.widget.GridLayoutManager} exibe itens em uma grade.</li>
<li>{@link android.support.v7.widget.StaggeredGridLayoutManager} exibe itens em uma grade escalonada.</li>
</ul>

<p>Para criar um gerenciador de layout personalizado, amplie a classe {@link
android.support.v7.widget.RecyclerView.LayoutManager RecyclerView.LayoutManager}.</p>

<h3>Animações</h3>

<p>As animações para a adição e a remoção de itens são habilitadas, por padrão, em {@link
android.support.v7.widget.RecyclerView}. Para personalizá-las, amplie a classe
{@link android.support.v7.widget.RecyclerView.ItemAnimator RecyclerView.ItemAnimator} e use o
método {@link android.support.v7.widget.RecyclerView#setItemAnimator RecyclerView.setItemAnimator()}
.</p>

<h3 id="RVExamples">Exemplos</h3>

<p>O exemplo de código a seguir demonstra como adicionar o
{@link android.support.v7.widget.RecyclerView} a um layout:</p>

<pre>
&lt;!-- A RecyclerView with some commonly used attributes -->
&lt;android.support.v7.widget.RecyclerView
    android:id="@+id/my_recycler_view"
    android:scrollbars="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent"/>
</pre>

<p>Depois de adicionar um widget {@link android.support.v7.widget.RecyclerView} ao seu layout,
obtenha um identificador para o objeto, conecte-o a um gerenciador de layout e anexe um adaptador para que os
dados sejam exibidos:</p>

<pre>
public class MyActivity extends Activity {
    private RecyclerView mRecyclerView;
    private RecyclerView.Adapter mAdapter;
    private RecyclerView.LayoutManager mLayoutManager;

    &#64;Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.my_activity);
        mRecyclerView = (RecyclerView) findViewById(R.id.my_recycler_view);

        // use this setting to improve performance if you know that changes
        // in content do not change the layout size of the RecyclerView
        mRecyclerView.setHasFixedSize(true);

        // use a linear layout manager
        mLayoutManager = new LinearLayoutManager(this);
        mRecyclerView.setLayoutManager(mLayoutManager);

        // specify an adapter (see also next example)
        mAdapter = new MyAdapter(myDataset);
        mRecyclerView.setAdapter(mAdapter);
    }
    ...
}
</pre>

<p>O adaptador dá acesso aos itens no conjunto de dados, cria visualizações para os itens e
substitui o conteúdo de algumas das visualizações por novos itens de dados quando o item original não está
mais visível. O exemplo de código a seguir mostra uma implementação simples para um conjunto de dados
que consiste em uma matriz de strings exibidas usando widgets {@link android.widget.TextView}:</p>

<pre>
public class MyAdapter extends RecyclerView.Adapter&lt;MyAdapter.ViewHolder> {
    private String[] mDataset;

    // Provide a reference to the views for each data item
    // Complex data items may need more than one view per item, and
    // you provide access to all the views for a data item in a view holder
    public static class ViewHolder extends RecyclerView.ViewHolder {
        // each data item is just a string in this case
        public TextView mTextView;
        public ViewHolder(TextView v) {
            super(v);
            mTextView = v;
        }
    }

    // Provide a suitable constructor (depends on the kind of dataset)
    public MyAdapter(String[] myDataset) {
        mDataset = myDataset;
    }

    // Create new views (invoked by the layout manager)
    &#64;Override
    public MyAdapter.ViewHolder onCreateViewHolder(ViewGroup parent,
                                                   int viewType) {
        // create a new view
        View v = LayoutInflater.from(parent.getContext())
                               .inflate(R.layout.my_text_view, parent, false);
        // set the view's size, margins, paddings and layout parameters
        ...
        ViewHolder vh = new ViewHolder(v);
        return vh;
    }

    // Replace the contents of a view (invoked by the layout manager)
    &#64;Override
    public void onBindViewHolder(ViewHolder holder, int position) {
        // - get element from your dataset at this position
        // - replace the contents of the view with that element
        holder.mTextView.setText(mDataset[position]);

    }

    // Return the size of your dataset (invoked by the layout manager)
    &#64;Override
    public int getItemCount() {
        return mDataset.length;
    }
}
</pre>


<div style="float:right;margin-top:15px;margin-left:30px">
<img src="{@docRoot}design/material/images/card_travel.png" alt="" width="225" height="383">
<p class="img-caption" style="margin-left:12px">
<strong>Figura 3</strong>. Exemplos de cartões.
</p>
</div>

<h2 id="CardView">Criar cartões</h2>

<p>{@link android.support.v7.widget.CardView} amplia a classe {@link android.widget.FrameLayout} e
permite que você exiba informações dentro dos cartões que têm uma aparência consistente em toda a plataforma. Os widgets {@link
android.support.v7.widget.CardView} podem ter sombras e bordas arredondadas.</p>

<p>Para criar um cartão com sombra, use o atributo <code>card_view:cardElevation</code>.
{@link android.support.v7.widget.CardView} usa elevação real e sombras dinâmicas no Android 5.0
(API de nível 21) e posteriores e volta para uma implementação de sombra programática em versões anteriores.
Para obter mais informações, consulte <a href="{@docRoot}training/material/compatibility.html">Como manter
a compatibilidade</a>.</p>

<p>Use estas propriedades para personalizar a aparência do widget
{@link android.support.v7.widget.CardView}:</p>

<ul>
  <li>Para definir o raio do canto nos layouts, use o atributo <code>card_view:cardCornerRadius</code>
.</li>
  <li>Para definir o raio do canto no seu código, use o método <code>CardView.setRadius</code>.</li>
  <li>Para definir a cor de segundo plano de um cartão, use o atributo <code>card_view:cardBackgroundColor</code>
.</li>
</ul>

<p>O exemplo de código a seguir mostra como incluir um widget {@link android.support.v7.widget.CardView}
no layout:</p>

<pre>
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:card_view="http://schemas.android.com/apk/res-auto"
    ... >
    &lt;!-- A CardView that contains a TextView -->
    &lt;android.support.v7.widget.CardView
        xmlns:card_view="http://schemas.android.com/apk/res-auto"
        android:id="@+id/card_view"
        android:layout_gravity="center"
        android:layout_width="200dp"
        android:layout_height="200dp"
        card_view:cardCornerRadius="4dp">

        &lt;TextView
            android:id="@+id/info_text"
            android:layout_width="match_parent"
            android:layout_height="match_parent" />
    &lt;/android.support.v7.widget.CardView>
&lt;/LinearLayout>
</pre>

<p>Para obter mais informações, consulte a referência de API para {@link android.support.v7.widget.CardView}.</p>


<h2 id="Dependencies">Adicionar dependências</h2>

<p>Os widgets {@link android.support.v7.widget.RecyclerView} e {@link android.support.v7.widget.CardView}
são parte da <a href="{@docRoot}tools/support-library/features.html#v7">Biblioteca de
Suporte v7</a>. Para usar esses widgets no projeto, adicione estas
<a href="{@docRoot}sdk/installing/studio-build.html#dependencies">dependências do Gradle</a> ao módulo
do aplicativo:</p>

<pre>
dependencies {
    ...
    compile 'com.android.support:cardview-v7:21.0.+'
    compile 'com.android.support:recyclerview-v7:21.0.+'
}
</pre>
